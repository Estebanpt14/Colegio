// <auto-generated />
using System;
using Colegio.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Colegio.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240107172828_ModificacionUsuario")]
    partial class ModificacionUsuario
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Colegio.Models.Acudiente", b =>
                {
                    b.Property<long>("NumeroDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("NumeroDocumento"));

                    b.Property<string>("DireccionResidencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Edad")
                        .HasColumnType("integer");

                    b.Property<long>("EstudianteHijoNumeroDocumento")
                        .HasColumnType("bigint");

                    b.Property<DateOnly>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<string>("GrupoSanguineo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("text");

                    b.HasKey("NumeroDocumento");

                    b.HasIndex("EstudianteHijoNumeroDocumento");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Acudientes");
                });

            modelBuilder.Entity("Colegio.Models.Administrador", b =>
                {
                    b.Property<long>("NumeroDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("NumeroDocumento"));

                    b.Property<string>("DireccionResidencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Edad")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<string>("GrupoSanguineo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("text");

                    b.HasKey("NumeroDocumento");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("Colegio.Models.Curso", b =>
                {
                    b.Property<string>("Codigo")
                        .HasColumnType("text");

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Codigo");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("Colegio.Models.Estudiante", b =>
                {
                    b.Property<long>("NumeroDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("NumeroDocumento"));

                    b.Property<string>("CursoCodigo")
                        .HasColumnType("text");

                    b.Property<string>("DireccionResidencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Edad")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<string>("GrupoSanguineo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("text");

                    b.HasKey("NumeroDocumento");

                    b.HasIndex("CursoCodigo");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Estudiantes");
                });

            modelBuilder.Entity("Colegio.Models.Materia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CursoCodigo")
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ProfesorNumeroDocumento")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CursoCodigo");

                    b.HasIndex("ProfesorNumeroDocumento");

                    b.ToTable("Materias");
                });

            modelBuilder.Entity("Colegio.Models.Nota", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PeriodoId")
                        .HasColumnType("integer");

                    b.Property<float>("Valor")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("PeriodoId");

                    b.ToTable("Notas");
                });

            modelBuilder.Entity("Colegio.Models.NotaEstudiante", b =>
                {
                    b.Property<long>("EstudianteNumeroDocumento")
                        .HasColumnType("bigint");

                    b.Property<long>("NotaId")
                        .HasColumnType("bigint");

                    b.HasKey("EstudianteNumeroDocumento", "NotaId");

                    b.HasIndex("NotaId");

                    b.ToTable("NotasEstudiantes");
                });

            modelBuilder.Entity("Colegio.Models.Periodo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("FechaFin")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<int>("MateriaId")
                        .HasColumnType("integer");

                    b.Property<int>("Numero")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MateriaId");

                    b.ToTable("Periodos");
                });

            modelBuilder.Entity("Colegio.Models.Profesor", b =>
                {
                    b.Property<long>("NumeroDocumento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("NumeroDocumento"));

                    b.Property<string>("DireccionResidencia")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Edad")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<string>("GrupoSanguineo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("text");

                    b.HasKey("NumeroDocumento");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Profesores");
                });

            modelBuilder.Entity("Colegio.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Colegio.Models.Acudiente", b =>
                {
                    b.HasOne("Colegio.Models.Estudiante", "EstudianteHijo")
                        .WithMany()
                        .HasForeignKey("EstudianteHijoNumeroDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Colegio.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("EstudianteHijo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Colegio.Models.Administrador", b =>
                {
                    b.HasOne("Colegio.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Colegio.Models.Estudiante", b =>
                {
                    b.HasOne("Colegio.Models.Curso", "Curso")
                        .WithMany("Estudiantes")
                        .HasForeignKey("CursoCodigo");

                    b.HasOne("Colegio.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Curso");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Colegio.Models.Materia", b =>
                {
                    b.HasOne("Colegio.Models.Curso", "Curso")
                        .WithMany("Materias")
                        .HasForeignKey("CursoCodigo");

                    b.HasOne("Colegio.Models.Profesor", "Profesor")
                        .WithMany("Materias")
                        .HasForeignKey("ProfesorNumeroDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("Colegio.Models.Nota", b =>
                {
                    b.HasOne("Colegio.Models.Periodo", "Periodo")
                        .WithMany("Notas")
                        .HasForeignKey("PeriodoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Periodo");
                });

            modelBuilder.Entity("Colegio.Models.NotaEstudiante", b =>
                {
                    b.HasOne("Colegio.Models.Estudiante", "Estudiante")
                        .WithMany("NotasEstudiantes")
                        .HasForeignKey("EstudianteNumeroDocumento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Colegio.Models.Nota", "Nota")
                        .WithMany("NotasEstudiantes")
                        .HasForeignKey("NotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estudiante");

                    b.Navigation("Nota");
                });

            modelBuilder.Entity("Colegio.Models.Periodo", b =>
                {
                    b.HasOne("Colegio.Models.Materia", "Materia")
                        .WithMany("Periodos")
                        .HasForeignKey("MateriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Materia");
                });

            modelBuilder.Entity("Colegio.Models.Profesor", b =>
                {
                    b.HasOne("Colegio.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Colegio.Models.Curso", b =>
                {
                    b.Navigation("Estudiantes");

                    b.Navigation("Materias");
                });

            modelBuilder.Entity("Colegio.Models.Estudiante", b =>
                {
                    b.Navigation("NotasEstudiantes");
                });

            modelBuilder.Entity("Colegio.Models.Materia", b =>
                {
                    b.Navigation("Periodos");
                });

            modelBuilder.Entity("Colegio.Models.Nota", b =>
                {
                    b.Navigation("NotasEstudiantes");
                });

            modelBuilder.Entity("Colegio.Models.Periodo", b =>
                {
                    b.Navigation("Notas");
                });

            modelBuilder.Entity("Colegio.Models.Profesor", b =>
                {
                    b.Navigation("Materias");
                });
#pragma warning restore 612, 618
        }
    }
}
